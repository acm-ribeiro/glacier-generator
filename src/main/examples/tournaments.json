{
  "openapi": "3.0.1",
  "info": {
    "title": "Tournament Management System",
    "version": "2.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "tournaments",
      "description": "Tournaments' API"
    },
    {
      "name": "players",
      "description": " Players' API"
    }
  ],
  "paths": {
    "/tournaments/{tournamentId}": {
      "get": {
        "tags": [
          "tournaments"
        ],
        "summary": "Get a tournament by ID.",
        "operationId": "getTournament",
        "parameters": [
          {
            "name": "tournamentId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the tournament.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tournament"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tournaments"
        ],
        "summary": "Update a tournament with the given ID.",
        "operationId": "updateTournament",
        "parameters": [
          {
            "name": "tournamentId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tournament"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated the tournament.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tournament"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tournaments"
        ],
        "summary": "Delete the tournament with the given ID.",
        "operationId": "deleteTournament",
        "parameters": [
          {
            "name": "tournamentId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed the tournament.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tournament"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      }
    },
    "/players/{playerNIF}": {
      "get": {
        "tags": [
          "players"
        ],
        "summary": "Get a player by NIF.",
        "operationId": "getPlayer",
        "parameters": [
          {
            "name": "playerNIF",
            "in": "path",
            "description": "Player NIF.",
            "required": true,
            "schema": {
              "type": "string",
              "x-regex": "(1|2)[0-9]{8}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the player.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "players"
        ],
        "summary": "Update a player with the given NIF.",
        "operationId": "updatePlayer",
        "parameters": [
          {
            "name": "playerNIF",
            "in": "path",
            "description": "Player NIF.",
            "required": true,
            "schema": {
              "type": "string",
              "x-regex": "(1|2)[0-9]{8}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Player"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated the player.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "players"
        ],
        "summary": "Delete the player with the given NIF.",
        "operationId": "deletePlayer",
        "parameters": [
          {
            "name": "playerNIF",
            "in": "path",
            "description": "playerNIF",
            "required": true,
            "schema": {
              "type": "string",
              "x-regex": "(1|2)[0-9]{8}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed the player.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          },
          "404": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      }
    },
    "/tournaments/{tournamentId}/enrollments": {
      "get": {
        "tags": [
          "tournaments"
        ],
        "summary": "Get a JSON array of players enrolled in the tournament with the given ID.",
        "operationId": "getTournamentEnrollments",
        "parameters": [
          {
            "name": "tournamentId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the players.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Player"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tournaments"
        ],
        "summary": "Enroll a player in the given tournament.",
        "operationId": "postEnrollment",
        "parameters": [
          {
            "name": "tournamentId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Player"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Player successfully enrolled in the tournament.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tournament"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "409": {
            "description": "Tournament is full.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      }
    },
    "/tournaments": {
      "get": {
        "tags": [
          "tournaments"
        ],
        "summary": "Get a list with all tournaments.",
        "operationId": "getTournaments",
        "responses": {
          "200": {
            "description": "Successfully returns a JSON array of all tournaments.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tournament"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tournaments"
        ],
        "summary": "Add a new tournament.",
        "operationId": "postTournament",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tournament"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully added the tournament.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tournament"
                }
              }
            },
            "links": {
              "DeleteTournamentByID": {
                "operationId": "deleteTournament",
                "parameters": {
                  "tournamentId": "$response.body#/tournamentId"
                },
                "description": "`tournamentId` value can be used as `tournamentId` in `DELETE /tournaments/{tournamentId}`."
              },
              "GetTournamentPlayers": {
                "operationId": "getTournamentEnrollments",
                "parameters": {
                  "tournamentId": "$response.body#/tournamentId"
                },
                "description": "`tournamentId` value can be used as `tournamentId` in `GET /tournaments/{tournamentId}/enrollments`."
              },
              "PutTournamentByID": {
                "operationId": "updateTournament",
                "parameters": {
                  "tournamentId": "$response.body#/tournamentId"
                },
                "description": "`tournamentId` value can be used as `tournamentId` in `PUT /tournaments/{tournamentId}`."
              },
              "DeleteEnrollmentByIDandNIF": {
                "operationId": "deleteEnrollment",
                "parameters": {
                  "tournamentId": "$response.body#/tournamentId"
                },
                "description": "`tournamentId` value can be used as `tournamentId` in `DELETE /tournaments/{tournamentId}/enrollments/{playerNIF}`."
              },
              "PostEnrollmentByTournamentID": {
                "operationId": "postEnrollment",
                "parameters": {
                  "tournamentId": "$response.body#/tournamentId"
                },
                "description": "`tournamentId` value can be used as `tournamentId` in `POST /tournaments/{tournamentId}/enrollments`."
              },
              "GetTournamentByID": {
                "operationId": "getTournament",
                "parameters": {
                  "tournamentId": "$response.body#/tournamentId"
                },
                "description": "`tournamentId` value can be used as `tournamentId` in `GET /tournaments/{tournamentId}`."
              },
              "GetEnrollmentByIDandNIF": {
                "operationId": "checkEnrollment",
                "parameters": {
                  "tournamentId": "$response.body#/tournamentId"
                },
                "description": "`tournamentId` value can be used as `tournamentId` in `GET /tournaments/{tournamentId}/enrollments/{playerNIF}`."
              },
              "GetCapacityByID": {
                "operationId": "getTournamentCapacity",
                "parameters": {
                  "tournamentId": "$response.body#/tournamentId"
                },
                "description": "`tournamentId` value can be used as `tournamentId` in `GET /tournaments/{tournamentId}/capacity`."
              }
            }
          }
        }
      }
    },
    "/players": {
      "get": {
        "tags": [
          "players"
        ],
        "summary": "Get a list with all players.",
        "operationId": "getPlayers",
        "responses": {
          "200": {
            "description": "Successfully returns a JSON array of all players.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Player"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "players"
        ],
        "summary": "Add a new player.",
        "operationId": "postPlayer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Player"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully added the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            },
            "links": {
              "GetEnrollmentByIDandNIFp": {
                "operationId": "checkEnrollment",
                "parameters": {
                  "playerNIF": "$response.body#/playerNIF"
                },
                "description": "`playerNIF` value can be used as `playerNIF` in `GET /tournaments/{tournamentId}/enrollments/{playerNIF}`."
              },
              "DeletePlayerByNIF": {
                "operationId": "deletePlayer",
                "parameters": {
                  "playerNIF": "$response.body#/playerNIF"
                },
                "description": "`playerNIF` value can be used as `playerNIF` in `DELETE /players/{playerNIF}`."
              },
              "PutPlayerByNIF": {
                "operationId": "updatePlayer",
                "parameters": {
                  "playerNIF": "$response.body#/playerNIF"
                },
                "description": "`playerNIF` value can be used as `playerNIF` in `PUT /players/{playerNIF}`."
              },
              "DeleteEnrollmentByIDandNIFp": {
                "operationId": "deleteEnrollment",
                "parameters": {
                  "playerNIF": "$response.body#/playerNIF"
                },
                "description": "`playerNIF` value can be used as `playerNIF` in `DELETE /tournaments/{tournamentId}/enrollments/{playerNIF}`."
              },
              "GetPlayerByNIF": {
                "operationId": "getPlayer",
                "parameters": {
                  "playerNIF": "$response.body#/playerNIF"
                },
                "description": "`playerNIF` value can be used as `playerNIF` in `GET /players/{playerNIF}`."
              },
              "GetPlayerTournaments": {
                "operationId": "getPlayerEnrollments",
                "parameters": {
                  "playerNIF": "$response.body#/playerNIF"
                },
                "description": "`playerNIF` value can be used as `playerNIF` in `GET /players/{playerNIF}/enrollments`."
              }
            }
          }
        }
      }
    },
    "/tournaments/{tournamentId}/enrollments/{playerNIF}": {
      "get": {
        "tags": [
          "tournaments"
        ],
        "summary": "Check if the player is enrolled in the tournament.",
        "operationId": "checkEnrollment",
        "parameters": [
          {
            "name": "tournamentId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "playerNIF",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-regex": "(1|2)[0-9]{8}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The given player is enrolled in the given tournament.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tournament"
                }
              }
            }
          },
          "404": {
            "description": "The given player is not enrolled in the given tournament.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tournaments"
        ],
        "summary": "Disenroll the player from the tournament.",
        "operationId": "deleteEnrollment",
        "parameters": [
          {
            "name": "tournamentId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "playerNIF",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-regex": "(1|2)[0-9]{8}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The given player was successfully disenrolled of the tournament.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tournament"
                }
              }
            }
          },
          "404": {
            "description": "The tournament, and/or the player, does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      }
    },
    "/tournaments/{tournamentId}/capacity": {
      "get": {
        "tags": [
          "tournaments"
        ],
        "summary": "Get a tournament's capacity.",
        "operationId": "getTournamentCapacity",
        "parameters": [
          {
            "name": "tournamentId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the capacity.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      }
    },
    "/players/{playerNIF}/enrollments": {
      "get": {
        "tags": [
          "players"
        ],
        "description": "Get a JSON array of tournaments in which the player with the given NIF is enrolled.",
        "operationId": "getPlayerEnrollments",
        "parameters": [
          {
            "name": "playerNIF",
            "in": "path",
            "description": "playerNIF",
            "required": true,
            "schema": {
              "type": "string",
              "x-regex": "(1|2)[0-9]{8}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned player's enrollments.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tournament"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorObject"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Player": {
        "required": [
          "email",
          "firstName",
          "playerNIF"
        ],
        "type": "object",
        "properties": {
          "playerNIF": {
            "pattern": "(1|2)[0-9]{8}",
            "type": "string",
            "x-gen": false,
            "example": "100200300"
          },
          "firstName": {
            "type": "string",
            "x-gen": false,
            "example": "Harry"
          },
          "lastName": {
            "type": "string",
            "x-gen": false,
            "example": "Potter"
          },
          "address": {
            "type": "string",
            "x-gen": false,
            "example": "The cupboard under the stairs, 4 Privet Drive, Little Whinging, Surrey"
          },
          "email": {
            "pattern": "[A-Za-z0-9]+[-_\\.]*[A-Za-z0-9]*\\@[A-Za-z]+\\.[A-Za-z]+",
            "type": "string",
            "x-gen": false,
            "example": "harry.potter@wizardmail.uk"
          },
          "phone": {
            "pattern": "2[0-9]{8}|9[0-9]{8}",
            "type": "string",
            "x-gen": false,
            "example": "999999999"
          },
          "tournaments": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tournament"
            },
            "x-gen": false
          }
        }
      },
      "Tournament": {
        "required": [
          "tournamentId",
          "tournamentName"
        ],
        "type": "object",
        "properties": {
          "tournamentId": {
            "type": "integer",
            "minimum": 0,
            "format": "int64",
            "example": 2,
            "x-gen": true
          },
          "tournamentName": {
            "type": "string",
            "x-gen": false,
            "example": "Triwizard Tournament"
          },
          "capacity": {
            "type": "integer",
            "format": "int32",
            "x-gen": false,
            "example": 4
          },
          "playerNumber": {
            "type": "integer",
            "format": "int32",
            "x-gen": false,
            "example": 2
          },
          "players": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            },
            "x-gen": false
          }
        }
      },
      "ErrorObject": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}