package utils;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;


public class JsonHandler {

	public static List<String> JsonArrayToStringArray (JsonArray json) {
		List<String> array = new ArrayList<>();
		
		if(json == null)
			return array;
		else 
			for(JsonElement e: json) 
				array.add(e.getAsString());
			
		return array;
	}

	// TODO what if they have the same schema but the parameters are in a different order? e.g. tournamentId <--> full
	// Checks if two objects have the same properties
	public static boolean sameSchema(JsonElement elem1, JsonElement elem2) {
		List<Entry<String, JsonElement>> e1Props = StringUtils.fromEntrySetToList(elem1.getAsJsonObject().entrySet());
		List<Entry<String, JsonElement>> e2Props = StringUtils.fromEntrySetToList(elem2.getAsJsonObject().entrySet());

		String propE1, propE2;

		if (e1Props.size() == e2Props.size()) {
			for (int i = 0; i < e1Props.size(); i++) {
				propE1 = e1Props.get(i).getKey();
				propE2 = e2Props.get(i).getKey();

				if (!propE1.equals(propE2))
					break;

				if (i == e1Props.size() - 1)
					return true;
			}
		}

		return false;
	}
	
	// Finds a parameter that was automatically generated by BD
	public static String findGenParam(JsonElement generated) {
		JsonObject obj = generated.getAsJsonObject();

		for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {
			String key = entry.getKey();
			JsonElement value = entry.getValue();

			if (value.getAsString() != null && value.getAsString().equals("gen"))
				return key;
			else
				try {
					if (value.getAsInt() == 9999)
						return key;
				} catch (NumberFormatException e) {
					return "";
				}
		}

		return "";
	}
	
		
	public static int getIntegerValue(JsonObject obj) {
		int value = 0;

		try {
			value = obj.get("value") != null ? obj.get("value").getAsInt() : obj.get("data").getAsInt();
		} catch(IllegalStateException ignored) {

		}
		
		return value;
	}
}
